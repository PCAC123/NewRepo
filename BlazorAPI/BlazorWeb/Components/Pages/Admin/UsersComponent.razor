@page "/admin/usersadmin"
@rendermode InteractiveServer
@using BlazorWeb.Models
@using BlazorWeb.Components.Service
@using System.Security.Cryptography
@inject UsersService UsersService
@inject IJSRuntime JS
<br />
<br />
<br />
<h3>Quản lý Người dùng</h3>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Họ tên</th>
            <th>Email</th>
            <th>SĐT</th>
            <th>Vai trò</th>
            <th>Thao tác</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.UserId</td>
                <td>@user.FullName</td>
                <td>@user.Email</td>
                <td>@user.PhoneNumber</td>
                <td>@user.Role</td>
                <td>
                    <button class="btn btn-warning me-2" @onclick="() => EditUser(user)">Sửa</button>
                    <button class="btn btn-danger" @onclick="() => DeleteUser(user.UserId)">Xóa</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (isEditing)
{
    <h4>@(editingUser.UserId == 0 ? "➕ Thêm người dùng" : "✏️ Cập nhật người dùng")</h4>
    <div class="mb-3">
        <input class="form-control mb-2" placeholder="Họ tên" @bind="editingUser.FullName" />
        <input class="form-control mb-2" placeholder="Email" @bind="editingUser.Email" />
        <input class="form-control mb-2" placeholder="Số điện thoại" @bind="editingUser.PhoneNumber" />
        <input class="form-control mb-2" placeholder="Địa chỉ" @bind="editingUser.Address" />
        <input type="password" class="form-control mb-2" placeholder="Mật khẩu" @bind="passwordInput" />
        <select class="form-control mb-2" @bind="editingUser.Role">
            <option value="Customer">Customer</option>
            <option value="Admin">Admin</option>
        </select>
        <button class="btn btn-success me-2" @onclick="SaveUser">Lưu</button>
        <button class="btn btn-secondary" @onclick="CancelEdit">Hủy</button>
    </div>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="CreateUser">➕ Thêm người dùng</button>
}

@code {
    private List<User> users = new();
    private User editingUser = new();
    private string passwordInput = string.Empty;
    private bool isEditing = false;
    private string message = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await UsersService.GetUsersAsync();
    }

    private void CreateUser()
    {
        editingUser = new User();
        passwordInput = string.Empty;
        isEditing = true;
    }

    private void EditUser(User user)
    {
        editingUser = new User
            {
                UserId = user.UserId,
                FullName = user.FullName,
                Email = user.Email,
                PhoneNumber = user.PhoneNumber,
                Role = user.Role,
                Address = user.Address,
                PasswordHash = user.PasswordHash // 👈 giữ lại password gốc
            };
        passwordInput = string.Empty;
        isEditing = true;
    }


    private async Task SaveUser()
    {
        if (string.IsNullOrWhiteSpace(editingUser.FullName) || string.IsNullOrWhiteSpace(editingUser.Email))
        {
            await JS.InvokeVoidAsync("alert", "❌ Vui lòng điền đầy đủ thông tin.");
            return;
        }
        if (await UsersService.IsEmailTakenAsync(editingUser.Email))
        {
            message = "❌ Email đã tồn tại. Vui lòng chọn email khác.";
            return;
        }
        // Luôn hash mật khẩu nếu có nhập gì đó vào passwordInput
        if (!string.IsNullOrWhiteSpace(passwordInput))
        {
            using var sha256 = SHA256.Create();
            var bytes = System.Text.Encoding.UTF8.GetBytes(passwordInput);
            var hashBytes = sha256.ComputeHash(bytes);
            editingUser.PasswordHash = Convert.ToHexString(hashBytes);
        }
        else if (editingUser.UserId != 0)
        {
            // Nếu đang update mà không nhập mật khẩu → giữ nguyên mật khẩu cũ
            var existingUser = await UsersService.GetUserByIdAsync(editingUser.UserId);
            editingUser.PasswordHash = existingUser.PasswordHash;
        }

        if (editingUser.UserId == 0)
        {
            await UsersService.AddUserAsync(editingUser);
            await JS.InvokeVoidAsync("alert", "✅ Thêm người dùng thành công!");
        }
        else
        {
            await UsersService.UpdateUserAsync(editingUser);
            await JS.InvokeVoidAsync("alert", "✅ Cập nhật người dùng thành công!");
        }

        await LoadUsers();
        isEditing = false;
    }


    private async Task DeleteUser(int id)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa người dùng này?"))
        {
            await UsersService.DeleteUserAsync(id);
            await LoadUsers();
        }
    }

    private void CancelEdit()
    {
        editingUser = new();
        passwordInput = string.Empty;
        isEditing = false;
    }
}
