@page "/auth"
@rendermode InteractiveServer
@using BlazorWeb.Components.Service
@using BlazorWeb.Models


@inject UsersService UsersService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>@(isRegistering ? "Đăng ký tài khoản" : "Đăng nhập khách hàng")</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info">@message</div>
}


<div class="form-group">
    <input class="form-control mb-2" placeholder="Email" @bind="email" />
    <input class="form-control mb-2" type="password" placeholder="Mật khẩu" @bind="password" />

    @if (isRegistering)
    {
        <input class="form-control mb-2" placeholder="Họ tên" @bind="fullName" />
        <input class="form-control mb-2" placeholder="Số điện thoại" @bind="phone" />
        <input class="form-control mb-2" placeholder="Địa chỉ" @bind="address" />
    }

    <button class="btn btn-primary" @onclick="HandleAuth">
        @(isRegistering ? "Đăng ký" : "Đăng nhập")
    </button>

    <button class="btn btn-link" @onclick="ToggleMode">
        @(isRegistering ? "Đã có tài khoản? Đăng nhập" : "Chưa có tài khoản? Đăng ký")
    </button>
</div>

@code {
    private bool isRegistering = false;
    private string email = string.Empty;
    private string password = string.Empty;
    private string fullName = string.Empty;
    private string phone = string.Empty;
    private string address = string.Empty;
    private string message = string.Empty;

    private async Task HandleAuth()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            message = "❌ Vui lòng điền email và mật khẩu.";
            return;
        }

        if (isRegistering)
        {
            if (await UsersService.IsEmailTakenAsync(email))
            {
                message = "❌ Email đã tồn tại. Vui lòng chọn email khác.";
                return;
            }

            var user = new User
                {
                    Email = email,
                    FullName = fullName,
                    PhoneNumber = phone,
                    Address = address,
                    Role = "Customer"
                };

            using var sha256 = System.Security.Cryptography.SHA256.Create();
            var hashBytes = sha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
            user.PasswordHash = Convert.ToHexString(hashBytes);

            await UsersService.AddUserAsync(user);

            message = "✅ Đăng ký thành công. Bạn có thể đăng nhập.";
            isRegistering = false;

            // Reset các field
            fullName = phone = address = string.Empty;
        }
        else
        {
            var user = await UsersService.LoginAsync(email, password);

            if (user == null)
            {
                message = "❌ Tài khoản hoặc mật khẩu không đúng.";
                return;
            }

            await JS.InvokeVoidAsync("localStorage.setItem", "UserId", user.UserId.ToString());
            await JS.InvokeVoidAsync("localStorage.setItem", "FullName", user.FullName);
            await JS.InvokeVoidAsync("localStorage.setItem", "UserRole", user.Role);

            message = "✅ Đăng nhập thành công.";
            // Thêm dòng này
            Navigation.NavigateTo("/", forceLoad: true);
        }
    }
    private void ToggleMode()
    {
        isRegistering = true;
        message = string.Empty;
    }
}
